[번외편] Atom을 통해 Github로 파일 올리려다가 stage가 안되어서 cmd로 push 시도.
처참히 실패. 수동으로 웹에 올려놓고, 로컬 삭제한 후 pull 시도, 실패.
결국 fetch 명령어로 해결보긴 했으나.. branch/master 교통정리가 안되어서 문제가 생긴 듯.
지금도 원인은 모른다(?). 그래도 해결되었으니 망정이지 오늘 하루 이걸로 시간 다 날릴뻔 ㅋㅋㅋ

[번외편2] 블로그 뉴 포스팅이 뜨질 않고 먹혀들어감. 레이아웃/테마 싹 바꾸고 뭘좀 알고 시작해야 할듯.
지금은 무리무리

1. 하이퍼링크에 각 배열의 내용이 들어간 URL을 삽입하는 반복문(var,while,i = i + 1;)
 위~~에 <script></script> 사이에는
 var coworkers = ['egoing', 'leezche', 'duru', 'taeho', 'Yaerhee'];
 아래의 <script></script> 사이에는
 var i=0;
 while(i < coworkers.length){
    document.write('<li><a href="https://www.github.com/'+coworkers[i]+'">'+coworkers[i]+'</a></li>');
    i = i + 1;
   }
 -> (깃허브 URL + 각 배열에 따른 URL 뒷부분) +링크 내용(배열에 따른 이름)

2. document.querySelector('ㅇㅅㅇ') -> ㅇㅅㅇ 한 개 밖에 못 고름. 주의해야 함
 -> document.querySelectorAll('a') -> <a href>쿼리가 전부 선택되어 배열처럼 출력됨 (console 기준)
 -> 예를 들어 한 html 안의 a href 쿼리가 네 개일 때에는 Nodelist(4) [a, a, a, a] 처럼 출력된다
 --> var alist(이름 지정함) = document.querySelectorAll('a');
      console.log(변수로 지정한 이름[index 수]); (해당 콘솔 페이지 내에 출력되도록 구문 설정)
 => ex. console.log(alist[1]); 의 결과는 <a href="ex2 200715 html" style="color: blue;">HTML</a>가 출력됨
 & console.log(alist.length); 로 alist 변수 배열에 있는 내용 갯수도 출력할 수 있음

2-1. var alist = document.querySelectorAll('a');
 console.log(alist.length); -> 4 (링크가 네개니까)

2-2. var alist = document.querySelectorAll('a');
 var i = 0;
 while (i < alist.length){
	alist[i].style.color = 'powderblue';
	i = i + 1;
	}
이렇게 반복문 출력 시 변수의 배열 안에 있었던 내용들이 끝 순서 부분까지 색상을 지정함

3. (함수예고) onclick JS가 있는 input 명령어가 1억번 반복...?ㄱ- 반복되는 구문들 사이의 지정값 ex. 색상을 바꿀 경우...?
혹은 길게길게 써져있는 코드들의 묶음 몇가지가 내용을 같이 한다고 확신할 수 있을지?
-> 함수가 우리를 구원해줍니다 훗후..... -> 어떻게?

3-1. night_day onclick 수식이 이제는 반복문 + 색상변경 등등의 살이 붙어서 너무 토실토실해짐.
 + 지정해둔게 너무 많은데 일부분이 바뀌었다고 해서 매번 그 반복문을 만져서 다 붙여넣을 수도 없음!!
 이렇게나 길게 짜둔 반복문을 통째로 묶어서... 이쁘게 한마디 명령어로 부르는 것은 어떨까?

3-2. head 태그 하단에 script 태그 설정, onclick 이벤트에 기술되어 있던 명령어들을 다 붙여넣음.
 + 그리고 윗줄에 function nightDayHanlder(self){ 적고, 맨 아랫줄에 } (괄호는 닫아야지) 적기
 -> 함수 호출어 function + 함수의 이름 + (self-함수 수식 자체를 말하는듯?) + 큰 수식 괄호 {}
 cf) 서술에 적혀 있었던 this는 전부 self로 바꿔줘야함!! (읭?)

3-3. function 명령어 지정은 로맨틱, 성공적. 이제 이 function을 호출할 때가 왔음.
어디에 넣을까? -> 아까 명령어 서술 삭제했었던 onclick 이벤트 창에 'nightDayHandler(this)' 넣음. 끝!!
이렇게 되면 서술 1억개(...)가 필요해도 가볍게 onclick 이벤트에 함수 이름만 지정해도 간편하게 끝낼 수 있음.

4. 함수 이론!

4-1. 기본적인 문법
 반복문을 쓰고 싶으나 반복문을 쓰기 어려운 상황이 있을 수 있음 ex. 연속되는 반복문이 아닐 경우
 -> 함수로 해치우자
 -> script 시작 부분에 function 이름(){}을 지정해 놓고,
 하단에서 함수가 필요한 자리에 그 function 이름(); 을 집어넣으면 된답니다.

4-2. (매개변수와 인자)
제품 선택 -> 입력, 원하는 제품 나옴 -> 출력, 함수란 이런 것들임.
단순 함수 호출 뿐만 아니라, 매개변수에 따라 호출되는 함수의 결과 값이 달라지는 것은 어떨까?!
function sum(left, right){
  document.write(left+right);
 }
 sum(2,3);
 sum(3,4);
이렇게 만들면 됩니다 여러분!!!!!
 -> function은 호출어이고 뒤의 내용은 부명령어(들어가는 내용의 위치/정보)로 추정됨!

(화면에서 맨 아래 sum(2,3); 이 부분에 있는 2와 3은 인자(argument)라고 부르고
이 값을 받아서 함수 안으로 매개해주는 변수들 ex. left, right 은 매개변수(parameter)라고 부름.

