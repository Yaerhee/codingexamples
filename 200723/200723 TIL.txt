1. UI vs API
1-1. UI - 사용자가 시스템을 제어하기 위해서 사용하는 조작 장치를 일컫는 말
1-2. API - App을 만들기 위해 프로그래밍에 사용하는 조작 장치들을 일컫는 말
 ex) <input type .... onclick="alert('')">
 & API와 순서는 찰싹 붙어있음(긴밀한 관계)
 -> JS라는 본드로 API를 결합(응용)해서 개성있는 응용프로그램을 만드는 것이라고 볼 수 있음

2. 수업 마치면서 (마무리)
 - 모든 개념을 총동원하려고 하지 맙시다! -> 필수불가결한 최소한의 도구만으로도 시도해봅시다
 - 최소한의 도구란? 순서에 따라서 실행되어야 하는 명령들이 실행되도록 하자는 말 (함수, 객체, 반복문 빼고)
 -> 기본 기틀을 다잡아놓고 주의깊게 각각의 함수, 객체, 반복문들을 천천히 활용해보자.
 -> 이후 다시 난관에 부딪히게 되면 다시 공부를 합시다

3. 한계에 부딪혔을 때의 검색어?
 - 웹페이지의 태그 삭제를 원하거나 / 특정 태그에 자식 태그를 넣고 싶다 -> document 객체 살펴보기
 - document로 찾기 어려울 경우 DOM 찾아보기(Document Object Model, document도 포함함)
 - 웹페이지가 아니라 웹 브라우저 자체를 제어해야 할 경우 -> window 객체 조사
 (새 창을 열어야하거나, 주소를 찾아야 하거나, 웹 페이지의 화면 크기를 JS 통해서 알아야 한다면
 window 객체에 속해있는 프로퍼티나 메서드가 도움이 될 것임)
 - 웹페이지 리로드 없이 정보 변경 -> ajax(필수 테크닉!)
 - 웹페이지 리로드 없이 현재 상태 유지 -> cookie (사용자를 위한 개인화된 서비스 제공 가능)
 - 인터넷 없이도 동작하는 웹페이지 만들기 -> offline web application
 - 화상통신 웹 앱 -> webRTC
 - 사용자의 음성 인식 or 음성으로 정보 전달 -> speech~로 시작하는 API 탐색
 - 3차원 그래픽으로 게임 등을 만들기 -> webGL
 - 가상현실 -> webVR

4. 완강!(짝짝짝)

5. long-take 파일 보면서 똑같이 따라서 코딩
(완료!)
